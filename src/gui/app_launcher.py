#!/usr/bin/env python3
"""
GUI Launcher para Gym Performance Analyzer
Interfaz gr√°fica moderna para seleccionar y ejecutar aplicaciones
"""

import sys
import os
import subprocess
import threading
import time
from pathlib import Path
import tkinter as tk
from tkinter import ttk, messagebox
from tkinter import font as tkFont
import webbrowser

class AppLauncher:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("üèãÔ∏è Gym Performance Analyzer - Launcher")
        self.root.geometry("800x600")
        self.root.configure(bg='#1e1e1e')
        
        # Configurar icono si existe
        try:
            icon_path = Path(__file__).parent.parent.parent / "assets" / "FitControl_logo.ico"
            if icon_path.exists():
                self.root.iconbitmap(str(icon_path))
        except:
            pass
        
        # Variables para procesos
        self.running_processes = {}
        self.setup_ui()
        
    def setup_ui(self):
        """Configurar la interfaz de usuario"""
        # Estilo
        style = ttk.Style()
        style.theme_use('clam')
        
        # Configurar colores oscuros
        style.configure('Title.TLabel', 
                       foreground='#ffffff', 
                       background='#1e1e1e',
                       font=('Arial', 24, 'bold'))
        
        style.configure('Subtitle.TLabel', 
                       foreground='#cccccc', 
                       background='#1e1e1e',
                       font=('Arial', 12))
        
        style.configure('Modern.TButton',
                       font=('Arial', 11, 'bold'),
                       padding=(20, 10))
        
        # Frame principal
        main_frame = tk.Frame(self.root, bg='#1e1e1e')
        main_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # T√≠tulo
        title_label = ttk.Label(main_frame, 
                               text="üèãÔ∏è Gym Performance Analyzer", 
                               style='Title.TLabel')
        title_label.pack(pady=(0, 10))
        
        subtitle_label = ttk.Label(main_frame, 
                                 text="Selecciona la aplicaci√≥n que deseas ejecutar", 
                                 style='Subtitle.TLabel')
        subtitle_label.pack(pady=(0, 30))
        
        # Frame para botones
        buttons_frame = tk.Frame(main_frame, bg='#1e1e1e')
        buttons_frame.pack(fill='both', expand=True)
        
        # Configurar grid
        for i in range(3):
            buttons_frame.grid_columnconfigure(i, weight=1)
        for i in range(3):
            buttons_frame.grid_rowconfigure(i, weight=1)
        
        # Detectar sistema operativo y configurar comandos
        import platform
        is_windows = platform.system() == 'Windows'
        
        # Definir aplicaciones con comandos espec√≠ficos por sistema
        if is_windows:
            self.apps = [
                {
                    'name': 'üñ•Ô∏è Aplicaci√≥n GUI\n(PyQt)',
                    'description': 'Interfaz de escritorio completa\ncon todas las funcionalidades',
                    'command': 'run_gui_app.bat',
                    'color': '#4CAF50',
                    'hover_color': '#45a049'
                },
                {
                    'name': 'üåê Demo Streamlit\n(Web)',
                    'description': 'Interfaz web para\nan√°lisis r√°pido',
                    'command': 'run_streamlit_app.bat',
                    'color': '#2196F3',
                    'hover_color': '#1976D2'
                },
                {
                    'name': 'üì± App M√≥vil\n(React Native)',
                    'description': 'Aplicaci√≥n m√≥vil\nFitControl (Info)',
                    'command': 'info_mobile',
                    'color': '#9C27B0',
                    'hover_color': '#7B1FA2'
                },
                {
                    'name': 'üîß Configuraci√≥n\n(Setup)',
                    'description': 'Configurar entorno\ny dependencias',
                    'command': 'setup_windows.bat',
                    'color': '#FF9800',
                    'hover_color': '#F57C00'
                },
                {
                    'name': 'üìö Documentaci√≥n\n(Windows)',
                    'description': 'Gu√≠a espec√≠fica\npara Windows 11',
                    'command': 'open_windows_docs',
                    'color': '#607D8B',
                    'hover_color': '#455A64'
                },
                {
                    'name': '‚ùå Salir\n',
                    'description': 'Cerrar el launcher',
                    'command': 'exit',
                    'color': '#F44336',
                    'hover_color': '#D32F2F'
                }
            ]
        else:
            self.apps = [
                {
                    'name': 'üñ•Ô∏è Aplicaci√≥n GUI\n(PyQt)',
                    'description': 'Interfaz de escritorio completa\ncon todas las funcionalidades',
                    'command': './run_gui_app.sh',
                    'color': '#4CAF50',
                    'hover_color': '#45a049'
                },
                {
                    'name': 'üåê Demo Streamlit\n(Web)',
                    'description': 'Interfaz web para\nan√°lisis r√°pido',
                    'command': './run_streamlit_app.sh',
                    'color': '#2196F3',
                    'hover_color': '#1976D2'
                },
                {
                    'name': 'üîß API Django\n(Backend)',
                    'description': 'Servidor API para\nentrenamientos',
                    'command': './run_django_api.sh',
                    'color': '#FF9800',
                    'hover_color': '#F57C00'
                },
                {
                    'name': 'üì± App M√≥vil\n(React Native)',
                    'description': 'Aplicaci√≥n m√≥vil\nFitControl',
                    'command': './run_mobile_app.sh',
                    'color': '#9C27B0',
                    'hover_color': '#7B1FA2'
                },
                {
                    'name': 'üöÄ Todas las Apps\n(Paralelo)',
                    'description': 'Ejecutar m√∫ltiples\naplicaciones',
                    'command': 'all',
                    'color': '#F44336',
                    'hover_color': '#D32F2F'
                },
                {
                    'name': 'üîç Verificar Entorno\n(Check)',
                    'description': 'Verificar que todo\nest√© configurado',
                    'command': './verificar_entorno.sh',
                    'color': '#607D8B',
                    'hover_color': '#455A64'
                }
            ]
        
        # Crear botones
        for i, app in enumerate(self.apps):
            row = i // 3
            col = i % 3
            
            # Frame para cada bot√≥n
            app_frame = tk.Frame(buttons_frame, bg='#1e1e1e')
            app_frame.grid(row=row, column=col, padx=10, pady=10, sticky='nsew')
            
            # Bot√≥n principal
            btn = tk.Button(app_frame,
                          text=app['name'],
                          bg=app['color'],
                          fg='white',
                          font=('Arial', 12, 'bold'),
                          relief='flat',
                          cursor='hand2',
                          command=lambda cmd=app['command'], name=app['name']: self.run_app(cmd, name))
            btn.pack(fill='both', expand=True, padx=5, pady=5)
            
            # Efectos hover
            btn.bind('<Enter>', lambda e, color=app['hover_color']: e.widget.configure(bg=color))
            btn.bind('<Leave>', lambda e, color=app['color']: e.widget.configure(bg=color))
            
            # Descripci√≥n
            desc_label = tk.Label(app_frame,
                                text=app['description'],
                                bg='#1e1e1e',
                                fg='#cccccc',
                                font=('Arial', 9),
                                justify='center')
            desc_label.pack(pady=(5, 0))
        
        # Frame inferior con informaci√≥n y botones adicionales
        bottom_frame = tk.Frame(main_frame, bg='#1e1e1e')
        bottom_frame.pack(fill='x', pady=(30, 0))
        
        # Frame para botones de acci√≥n
        action_frame = tk.Frame(bottom_frame, bg='#1e1e1e')
        action_frame.pack(side='right')
        
        # Bot√≥n para abrir documentaci√≥n
        docs_btn = tk.Button(action_frame,
                           text="üìö Documentaci√≥n",
                           bg='#34495e',
                           fg='white',
                           font=('Arial', 10),
                           relief='flat',
                           cursor='hand2',
                           command=self.open_docs)
        docs_btn.pack(side='left', padx=(0, 10))
        
        # Bot√≥n de salir
        exit_btn = tk.Button(action_frame,
                           text="‚ùå Salir",
                           bg='#e74c3c',
                           fg='white',
                           font=('Arial', 10),
                           relief='flat',
                           cursor='hand2',
                           command=self.exit_app)
        exit_btn.pack(side='left')
        
        # Estado
        self.status_label = tk.Label(bottom_frame,
                                   text="‚úÖ Listo para ejecutar aplicaciones",
                                   bg='#1e1e1e',
                                   fg='#27ae60',
                                   font=('Arial', 10))
        self.status_label.pack(side='left')
        
    def run_app(self, command, app_name):
        """Ejecutar una aplicaci√≥n"""
        def run_in_thread():
            try:
                # Cambiar al directorio ra√≠z del proyecto
                project_root = Path(__file__).parent.parent.parent
                os.chdir(project_root)
                
                self.update_status(f"üöÄ Iniciando {app_name}...", '#f39c12')
                
                # Detectar sistema operativo
                import platform
                is_windows = platform.system() == 'Windows'
                
                # Manejar comandos especiales
                if command == 'all':
                    self.run_all_apps()
                elif command == 'info_mobile':
                    self.show_mobile_info()
                elif command == 'open_windows_docs':
                    self.open_windows_docs()
                elif command == 'exit':
                    self.exit_app()
                else:
                    # Ejecutar script espec√≠fico del sistema
                    if is_windows:
                        if command.endswith('.bat'):
                            # Verificar que el archivo existe
                            if not Path(command).exists():
                                self.update_status(f"‚ùå Archivo {command} no encontrado", '#e74c3c')
                                messagebox.showerror("Error", f"No se encontr√≥ el archivo {command}")
                                return
                            
                            # Ejecutar script batch en nueva ventana
                            process = subprocess.Popen(['cmd', '/c', 'start', 'cmd', '/k', command], 
                                                     shell=True)
                            self.update_status(f"‚úÖ {app_name} iniciado en nueva ventana", '#27ae60')
                        else:
                            # Comando directo
                            process = subprocess.run(command, shell=True, check=True)
                            self.update_status(f"‚úÖ {app_name} completado", '#27ae60')
                    else:
                        # Sistema Unix (Linux/macOS)
                        # Hacer el script ejecutable
                        subprocess.run(['chmod', '+x', command], check=True)
                        
                        # Ejecutar el comando
                        process = subprocess.Popen(['bash', command], 
                                                 stdout=subprocess.PIPE, 
                                                 stderr=subprocess.PIPE)
                        
                        self.running_processes[app_name] = process
                        self.update_status(f"‚úÖ {app_name} ejecut√°ndose", '#27ae60')
                        
                        # Esperar a que termine
                        stdout, stderr = process.communicate()
                        
                        if process.returncode == 0:
                            self.update_status(f"‚úÖ {app_name} completado", '#27ae60')
                        else:
                            self.update_status(f"‚ùå Error en {app_name}", '#e74c3c')
                            if stderr:
                                messagebox.showerror("Error", f"Error ejecutando {app_name}:\n{stderr.decode()}")
                        
                        # Limpiar del diccionario
                        if app_name in self.running_processes:
                            del self.running_processes[app_name]
                        
            except Exception as e:
                self.update_status(f"‚ùå Error: {str(e)}", '#e74c3c')
                messagebox.showerror("Error", f"Error ejecutando {app_name}:\n{str(e)}")
        
        # Ejecutar en hilo separado
        thread = threading.Thread(target=run_in_thread)
        thread.daemon = True
        thread.start()
    
    def run_all_apps(self):
        """Ejecutar todas las aplicaciones en paralelo"""
        apps_to_run = [
            ('./run_streamlit_app.sh', 'Streamlit'),
            ('./run_django_api.sh', 'Django API'),
            ('./run_mobile_app.sh', 'Mobile App')
        ]
        
        # Ejecutar cada app en terminal separada
        for script, name in apps_to_run:
            try:
                subprocess.run(['chmod', '+x', script], check=True)
                subprocess.Popen(['gnome-terminal', '--title', name, '--', 'bash', '-c', 
                                f'{script}; echo "Presiona Enter para cerrar..."; read'], 
                               stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                time.sleep(1)  # Peque√±a pausa entre lanzamientos
            except Exception as e:
                print(f"Error launching {name}: {e}")
        
        # Ejecutar GUI app en el proceso principal
        try:
            subprocess.run(['chmod', '+x', './run_gui_app.sh'], check=True)
            subprocess.run(['bash', './run_gui_app.sh'])
        except Exception as e:
            print(f"Error launching GUI app: {e}")
    
    def update_status(self, message, color):
        """Actualizar el estado en la UI"""
        def update():
            self.status_label.configure(text=message, fg=color)
        
        self.root.after(0, update)
    
    def show_mobile_info(self):
        """Mostrar informaci√≥n sobre la aplicaci√≥n m√≥vil"""
        info_text = """
üì± Aplicaci√≥n M√≥vil FitControl (React Native)

INFORMACI√ìN IMPORTANTE:

‚úÖ QU√â TENEMOS:
‚Ä¢ Una aplicaci√≥n m√≥vil completa React Native
‚Ä¢ Compatible con Android e iOS
‚Ä¢ Interfaz nativa optimizada

‚ö†Ô∏è PARA EJECUTAR NECESITAS:

1. EMULADOR ANDROID:
   ‚Ä¢ Android Studio con AVD Manager
   ‚Ä¢ O dispositivo Android f√≠sico

2. DESARROLLO iOS (solo en macOS):
   ‚Ä¢ Xcode con simulador iOS
   ‚Ä¢ O dispositivo iOS f√≠sico

3. ENTORNO DE DESARROLLO:
   ‚Ä¢ Node.js (v16 o superior)
   ‚Ä¢ React Native CLI
   ‚Ä¢ Java Development Kit (JDK)

üîß CONFIGURACI√ìN AUTOM√ÅTICA:
Pr√≥ximamente crearemos scripts autom√°ticos para:
‚Ä¢ Instalar Android Studio
‚Ä¢ Configurar emuladores
‚Ä¢ Ejecutar la app m√≥vil

üí° RECOMENDACI√ìN ACTUAL:
Usa la aplicaci√≥n de escritorio (PyQt) que tiene
todas las funcionalidades y no requiere emulador.
        """
        
        mobile_window = tk.Toplevel(self.root)
        mobile_window.title("üì± Informaci√≥n Aplicaci√≥n M√≥vil")
        mobile_window.geometry("500x600")
        mobile_window.configure(bg='#1e1e1e')
        
        text_widget = tk.Text(mobile_window, 
                            wrap='word', 
                            bg='#2e2e2e',
                            fg='#ffffff',
                            font=('Arial', 10),
                            padx=20,
                            pady=20)
        text_widget.pack(fill='both', expand=True, padx=20, pady=20)
        text_widget.insert('1.0', info_text)
        text_widget.configure(state='disabled')

    def open_windows_docs(self):
        """Abrir documentaci√≥n espec√≠fica de Windows"""
        import platform
        if platform.system() == 'Windows':
            windows_docs = ["README_WINDOWS.md", "README.md", "GUIA_EJECUCION.md"]
            for doc in windows_docs:
                if Path(doc).exists():
                    os.startfile(doc)
                    self.update_status(f"üìö Abriendo {doc}", '#27ae60')
                    return
        self.open_docs()

    def open_docs(self):
        """Abrir documentaci√≥n"""
        docs_files = [
            "GUIA_EJECUCION.md",
            "README.md",
            "MEJORAS_IMPLEMENTADAS.md"
        ]
        
        for doc in docs_files:
            if Path(doc).exists():
                if sys.platform == 'linux':
                    subprocess.run(['xdg-open', doc])
                elif sys.platform == 'darwin':
                    subprocess.run(['open', doc])
                elif sys.platform == 'win32':
                    os.startfile(doc)
                break
    
    def exit_app(self):
        """Salir de la aplicaci√≥n"""
        if self.running_processes:
            if messagebox.askyesno("Confirmar", 
                                 "Hay aplicaciones ejecut√°ndose. ¬øQuieres cerrar de todas formas?"):
                # Terminar procesos activos
                for process in self.running_processes.values():
                    try:
                        process.terminate()
                    except:
                        pass
                self.root.quit()
        else:
            self.root.quit()
    
    def run(self):
        """Ejecutar el launcher"""
        self.root.mainloop()

def main():
    """Funci√≥n principal"""
    launcher = AppLauncher()
    launcher.run()

if __name__ == "__main__":
    main()